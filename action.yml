name: Open edX Tutor k8s print dump
description: Github Action to print a summary report (a "dump") of the tutor configuration contents to the console. Optionally persists the output to Kubernetes Secrets.
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  namespace:
    description: 'The Kubernetes namespace to which the Open edX platform environment is or will be deployed. Example: openedx-prod'
    required: false
    default: UNASSIGNED
    type: string
  action:
    description: 'The Cookiecutter Github Action workflow that called this action.'
    required: false
    default: UNASSIGNED
    type: choice
    options:
    - UNASSIGNED
    - build
    - deploy
runs:
  using: "composite"
  steps:
    # 1. ensure that we save secrets into the correct Kubernetes namespace
    - name: set k8s context and namespace and initialize working directory
      if: ${{ inputs.namespace != 'UNASSIGNED' }}
      id: set-context
      shell: bash
      run: |-
        kubectl config set-context --current --namespace=${{ inputs.namespace }}

    - name: initialize working directory
      if: ${{ inputs.namespace != 'UNASSIGNED' }} && ${{ inputs.action != 'UNASSIGNED' }}
      id: create-working-directory
      shell: bash
      run: |-
        mkdir $(tutor config printroot)/cookiecutter

    # 2. pip list
    #    note that this is the pip list from the virtual environment created
    #    inside the Github Actions runner for processing the parent workflow
    #    of this action.
    # -------------------------------------------------------------------------
    - name: pip list
      id: pip-list
      shell: bash
      continue-on-error: true
      run: |-
        echo 'pip list:'
        echo '-------------------------------------'
        pip list

    - name: persist pip list
      if: ${{ inputs.namespace != 'UNASSIGNED' }}
      id: pip-list-persist
      shell: bash
      run: |-
        pip list --format=json > $(tutor config printroot)/cookiecutter/pip.json

        if [ ${{ inputs.action }} = "build" ]; then
          kubectl create secret generic 'cookiecutter-ci-build-pip'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/cookiecutter/pip.json \
          -o yaml | kubectl apply -f -
        fi
        if [ ${{ inputs.action }} = "deploy" ]; then
          kubectl create secret generic 'cookiecutter-ci-deploy-pip'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/cookiecutter/pip.json \
          -o yaml | kubectl apply -f -
        fi

    # 3. apps list: stuff like openedx, caddy, redis, mongodb, mysql
    #    helps to explain whether the intention was to run services remotely
    #    or from inside the cluster
    # -------------------------------------------------------------------------
    - name: Dump tutor config apps folder
      id: config-apps
      shell: bash
      continue-on-error: true
      run: |-
        echo 'apps:'
        echo '-------------------------------------'
        ls $(tutor config printroot)/env/apps -lha

    - name: persist tutor config apps folder list
      if: ${{ inputs.namespace != 'UNASSIGNED' }}
      id: config-apps-persist
      shell: bash
      continue-on-error: true
      run: |-
        ls $(tutor config printroot)/env/apps | jq -R -s -c 'split("\n")[:-1]' > $(tutor config printroot)/cookiecutter/apps.json

        if [ ${{ inputs.action }} = "build" ]; then
          kubectl create secret generic 'cookiecutter-ci-build-apps'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/cookiecutter/apps.json \
          -o yaml | kubectl apply -f -
        fi
        if [ ${{ inputs.action }} = "deploy" ]; then
          kubectl create secret generic 'cookiecutter-ci-deploy-apps'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/cookiecutter/apps.json \
          -o yaml | kubectl apply -f -
        fi

    # 4. tutor plugins list. stuff like mfe, smtp, tutor-contrib-k8s-deploy-tasks,
    #    tutor-contrib-s3, etcetera
    # -------------------------------------------------------------------------
    - name: Dump tutor config plugins folder
      id: config-plugins
      shell: bash
      continue-on-error: true
      run: |-
        if [ ! -d "$(tutor config printroot)/env/plugins" ]; then
          echo "No plugins installed."
          exit
        fi
        echo 'plugins:'
        echo '-------------------------------------'
        ls $(tutor config printroot)/env/plugins -lha

    - name: persist tutor config plugins list
      if: ${{ inputs.namespace != 'UNASSIGNED' }}
      id: config-plugins-persist
      shell: bash
      continue-on-error: true
      run: |-
        if [ -d "$(tutor config printroot)/env/plugins" ]; then
          ls $(tutor config printroot)/env/plugins | jq -R -s -c 'split("\n")[:-1]' > $(tutor config printroot)/cookiecutter/plugins.json
        else
          echo "[]" > $(tutor config printroot)/cookiecutter/plugins.json
        fi

        if [ ${{ inputs.action }} = "build" ]; then
          kubectl create secret generic 'cookiecutter-ci-build-plugins'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/cookiecutter/plugins.json \
          -o yaml | kubectl apply -f -
        fi
        if [ ${{ inputs.action }} = "deploy" ]; then
          kubectl create secret generic 'cookiecutter-ci-deploy-plugins'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/cookiecutter/plugins.json \
          -o yaml | kubectl apply -f -
        fi

    # 5. tutor config.yml
    #    contains the final collection of stuff that was saved using
    #    'tutor config save'
    # -------------------------------------------------------------------------
    - name: Dump tutor config.yml
      id: config-tutor
      shell: bash
      continue-on-error: true
      run: |-
        echo 'config.yml:'
        echo '-------------------------------------'
        cat -n $(tutor config printroot)/config.yml

    - name: persist tutor config.yml
      if: ${{ inputs.namespace != 'UNASSIGNED' }}
      id: config-tutor-persist
      shell: bash
      continue-on-error: true
      run: |-
        yq -j -o=json $(tutor config printroot)/config.yml > $(tutor config printroot)/cookiecutter/config.json

        if [ ${{ inputs.action }} = "build" ]; then
          kubectl create secret generic 'cookiecutter-ci-build-tutor' \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/cookiecutter/config.json \
          -o yaml | kubectl apply -f -
        fi
        if [ ${{ inputs.action }} = "deploy" ]; then
          kubectl create secret generic 'cookiecutter-ci-deploy-tutor' \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/cookiecutter/config.json \
          -o yaml | kubectl apply -f -
        fi

    # 6. tutor lms.env.yml and cms.env.yml
    #    contain the final interim values that tutor uses for rendering
    #    envs/common.py and envs/tutor/production.py files
    # -------------------------------------------------------------------------
    - name: Dump tutor env/apps/openedx/config/lms.env.yml
      id: config-lms
      shell: bash
      continue-on-error: true
      run: |-
        echo 'lms.env.yml:'
        echo '-------------------------------------'
        cat -n $(tutor config printroot)/env/apps/openedx/config/lms.env.yml

    - name: persist tutor env/apps/openedx/config/lms.env.json
      if: ${{ inputs.namespace != 'UNASSIGNED' }}
      id: config-lms-persist
      shell: bash
      continue-on-error: true
      run: |-

        if [ ${{ inputs.action }} = "build" ]; then
          kubectl create secret generic 'cookiecutter-ci-build-lms'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/env/apps/openedx/config/lms.env.yml \
          -o yaml | kubectl apply -f -
        fi
        if [ ${{ inputs.action }} = "deploy" ]; then
          kubectl create secret generic 'cookiecutter-ci-deploy-lms'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/env/apps/openedx/config/lms.env.yml \
          -o yaml | kubectl apply -f -
        fi

    - name: Dump tutor env/apps/openedx/config/cms.env.yml
      shell: bash
      continue-on-error: true
      run: |-
        echo 'cms.env.yml:'
        echo '-------------------------------------'
        cat -n $(tutor config printroot)/env/apps/openedx/config/cms.env.yml

    - name: persist tutor env/apps/openedx/config/cms.env.yml
      if: ${{ inputs.namespace != 'UNASSIGNED' }}
      id: config-cms-persist
      shell: bash
      continue-on-error: true
      run: |-

        if [ ${{ inputs.action }} = "build" ]; then
          kubectl create secret generic 'cookiecutter-ci-build-cms'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/env/apps/openedx/config/cms.env.yml \
          -o yaml | kubectl apply -f -
        fi
        if [ ${{ inputs.action }} = "deploy" ]; then
          kubectl create secret generic 'cookiecutter-ci-deploy-cms'  \
          --save-config \
          --dry-run=client \
          --from-file=$(tutor config printroot)/env/apps/openedx/config/cms.env.yml \
          -o yaml | kubectl apply -f -
        fi

    # 7. tutor Docker container build configuration.
    #
    #    Contains the final sets of resources that tutor will include in its
    #    Docker container build of openedx.
    #
    #    extract meta data about each category of resource and stash each
    #    section as a json file in a directory named ./cookiecutter/
    #    Create a single Kubernetes secret containing the entire collection
    #    of meta data
    # -------------------------------------------------------------------------
    - name: persist tutor private.txt requirements file
      if: ${{ inputs.namespace != 'UNASSIGNED' }} && ${{ inputs.action == 'build' }}
      id: config-requirements
      shell: bash
      continue-on-error: true
      run: |-
        mkdir $(tutor config printroot)/env/build/openedx/cookiecutter

        if [ -d "$(tutor config printroot)/env/build/openedx/requirements/" ]; then
          ls $(tutor config printroot)/env/build/openedx/requirements/ | jq -R -s -c 'split("\n")[:-1]' > $(tutor config printroot)/env/build/openedx/cookiecutter/requirements.json
        else
          touch $(tutor config printroot)/env/build/openedx/cookiecutter/requirements.json
        fi

        touch $(tutor config printroot)/env/build/openedx/cookiecutter/revisions.yml
        cat "$(tutor config printroot)/env/build/openedx/revisions.yml" > $(tutor config printroot)/env/build/openedx/cookiecutter/revisions.yml

        if [ -d "$(tutor config printroot)/env/build/openedx/themes/" ]; then
          ls $(tutor config printroot)/env/build/openedx/themes/ | jq -R -s -c 'split("\n")[:-1]' > $(tutor config printroot)/env/build/openedx/cookiecutter/themes.json
        else
          touch $(tutor config printroot)/env/build/openedx/cookiecutter/requirements.json
        fi

        kubectl create secret generic 'cookiecutter-ci-build-docker'  \
        --save-config \
        --dry-run=client \
        --from-file=$(tutor config printroot)/env/build/openedx/cookiecutter/requirements.json \
        --from-file=$(tutor config printroot)/env/build/openedx/cookiecutter/revisions.yml \
        --from-file=$(tutor config printroot)/env/build/openedx/cookiecutter/themes.json \
        --from-file=$(tutor config printroot)/env/build/openedx/Dockerfile \
        -o yaml | kubectl apply -f -

    - name: cleanup dump environment
      id: cleanup-environment
      shell: bash
      run: |-
        if [ -d "$(tutor config printroot)/cookiecutter" ]; then
          sudo rm -r $(tutor config printroot)/cookiecutter
        fi

        if [ -d "$(tutor config printroot)/env/build/openedx/cookiecutter" ]; then
          sudo rm -r $(tutor config printroot)/env/build/openedx/cookiecutter
        fi
